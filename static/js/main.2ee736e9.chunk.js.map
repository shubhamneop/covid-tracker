{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","isBlue","isGray","active","total","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","ChangeView","useMap","setView","console","log","MapContainer","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","rgb","LineGraph","countryCode","useState","setData","useEffect","fetch","then","response","json","timeline","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setmapCountries","setCasesType","name","iso2","sortedData","getContriesData","onCountryChange","event","target","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","population","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ee736e9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./InfoBox.css\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nfunction InfoBox({\n  title,\n  cases,\n  isRed,\n  isBlue,\n  isGray,\n  active,\n  total,\n  ...props\n}) {\n  return (\n    <Card\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      } ${isGray && \"infoBox--gray\"} ${isBlue && \"infoBox--blue\"}`}\n      onClick={props.onClick}\n    >\n      <CardContent>\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n        <h2\n          className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"} ${\n            isGray && \"infoBox__cases--grey \"\n          } ${isBlue && \"infoBox__cases--blue\"}`}\n        >\n          {cases}\n        </h2>\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#808080\",\n    multiplier: 2000,\n  },\n  active: {\n    hex: \"#66CCFF\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n  //   sortedData.sort((a, b) => {\n  //     if (a.cases > b.cases) {\n  //       return -1;\n  //     } else {\n  //       return 1;\n  //     }\n  //   });\n\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n};\n\nexport const prettyPrintStat = (stat) => {\n  return stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n};\n\nexport const showDataOnMap = (data, casesType) =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      pathOptions={{\n        color: casesTypeColors[casesType].hex,\n        fillColor: casesTypeColors[casesType].hex,\n      }}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confiremd\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport \"./Map.css\";\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  console.log(\"center's\", center);\n\n  function ChangeView({ center, zoom }) {\n    const map = useMap();\n    map.setView(center, zoom);\n    return null;\n  }\n  return (\n    <div className=\"map\">\n      <MapContainer center={[center[0], center[1]]} zoom={zoom}>\n        <ChangeView center={center} zoom={zoom} />\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, cases }) => (\n        <tr>\n          <td>{country}</td>\n          <td>\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#FF0000\",\n    rgb: \"rgb(168,0,0)\",\n  },\n  recovered: {\n    hex: \"#00FF00\",\n    rgb: \"rgb(125, 215, 29)\",\n  },\n  deaths: {\n    hex: \"#282828\",\n    rgb: \"rgb(128,128,128)\",\n  },\n};\n\nfunction LineGraph({ casesType = \"cases\", countryCode, ...props }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const url =\n        countryCode === \"worldwide\"\n          ? \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"\n          : `https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=120`;\n      await fetch(url)\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(\n            countryCode === \"worldwide\" ? data : data.timeline,\n            casesType\n          );\n          setData(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType, countryCode]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: casesTypeColors[casesType].rgb,\n                borderColor: casesTypeColors[casesType].hex,\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\nexport default LineGraph;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport FormContol from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState([20, 77]);\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setmapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getContriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setmapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getContriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        countryCode === \"worldwide\"\n          ? setMapCenter([20, 77])\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid-19 Tracker</h1>\n          <FormContol className=\"app_dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem key=\"worldwide\" value=\"worldwide\">\n                Worldwide\n              </MenuItem>\n              {countries.map((country, index) => (\n                <MenuItem key={index} value={country.value}>\n                  {country.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormContol>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Carona Virus cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isGray\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Death\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n          <InfoBox\n            isBlue\n            active={casesType === \"active\"}\n            onClick={(e) => setCasesType(\"active\")}\n            title=\"Active\"\n            cases={prettyPrintStat(countryInfo.active)}\n            total={prettyPrintStat(countryInfo.population)}\n          />\n        </div>\n\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h2>Live Cases by Country</h2>\n          <Table countries={tableData} />\n        </CardContent>\n        <CardContent>\n          <h3 className=\"app__graphTitle\">\n            Worldwide new {casesType === \"active\" ? \"Cases\" : casesType}{\" \"}\n          </h3>\n          <LineGraph\n            className=\"app__graph\"\n            casesType={casesType === \"active\" ? \"cases\" : casesType}\n            countryCode={country}\n          />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}